"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@electric-sql";
exports.ids = ["vendor-chunks/@electric-sql"];
exports.modules = {

/***/ "(rsc)/./node_modules/@electric-sql/client/dist/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/@electric-sql/client/dist/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BackoffDefaults: () => (/* binding */ BackoffDefaults),\n/* harmony export */   FetchError: () => (/* binding */ FetchError),\n/* harmony export */   Shape: () => (/* binding */ Shape),\n/* harmony export */   ShapeStream: () => (/* binding */ ShapeStream),\n/* harmony export */   isChangeMessage: () => (/* binding */ isChangeMessage),\n/* harmony export */   isControlMessage: () => (/* binding */ isControlMessage)\n/* harmony export */ });\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, \"write to private field\"), setter ? setter.call(obj, value) : member.set(obj, value), value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/error.ts\nvar FetchError = class _FetchError extends Error {\n  constructor(status, text, json, headers, url, message) {\n    super(\n      message || `HTTP Error ${status} at ${url}: ${text != null ? text : JSON.stringify(json)}`\n    );\n    this.url = url;\n    this.name = `FetchError`;\n    this.status = status;\n    this.text = text;\n    this.json = json;\n    this.headers = headers;\n  }\n  static fromResponse(response, url) {\n    return __async(this, null, function* () {\n      const status = response.status;\n      const headers = Object.fromEntries([...response.headers.entries()]);\n      let text = void 0;\n      let json = void 0;\n      const contentType = response.headers.get(`content-type`);\n      if (contentType && contentType.includes(`application/json`)) {\n        json = yield response.json();\n      } else {\n        text = yield response.text();\n      }\n      return new _FetchError(status, text, json, headers, url);\n    });\n  }\n};\nvar FetchBackoffAbortError = class extends Error {\n  constructor() {\n    super(`Fetch with backoff aborted`);\n    this.name = `FetchBackoffAbortError`;\n  }\n};\nvar MissingShapeUrlError = class extends Error {\n  constructor() {\n    super(`Invalid shape options: missing required url parameter`);\n    this.name = `MissingShapeUrlError`;\n  }\n};\nvar InvalidSignalError = class extends Error {\n  constructor() {\n    super(`Invalid signal option. It must be an instance of AbortSignal.`);\n    this.name = `InvalidSignalError`;\n  }\n};\nvar MissingShapeHandleError = class extends Error {\n  constructor() {\n    super(\n      `shapeHandle is required if this isn't an initial fetch (i.e. offset > -1)`\n    );\n    this.name = `MissingShapeHandleError`;\n  }\n};\nvar ReservedParamError = class extends Error {\n  constructor(reservedParams) {\n    super(\n      `Cannot use reserved Electric parameter names in custom params: ${reservedParams.join(`, `)}`\n    );\n    this.name = `ReservedParamError`;\n  }\n};\nvar ParserNullValueError = class extends Error {\n  constructor(columnName) {\n    super(`Column \"${columnName != null ? columnName : `unknown`}\" does not allow NULL values`);\n    this.name = `ParserNullValueError`;\n  }\n};\nvar MissingHeadersError = class extends Error {\n  constructor(url, missingHeaders) {\n    let msg = `The response for the shape request to ${url} didn't include the following required headers:\n`;\n    missingHeaders.forEach((h) => {\n      msg += `- ${h}\n`;\n    });\n    msg += `\nThis is often due to a proxy not setting CORS correctly so that all Electric headers can be read by the client.`;\n    msg += `\nFor more information visit the troubleshooting guide: /docs/guides/troubleshooting/missing-headers`;\n    super(msg);\n  }\n};\n\n// src/parser.ts\nvar parseNumber = (value) => Number(value);\nvar parseBool = (value) => value === `true` || value === `t`;\nvar parseBigInt = (value) => BigInt(value);\nvar parseJson = (value) => JSON.parse(value);\nvar identityParser = (v) => v;\nvar defaultParser = {\n  int2: parseNumber,\n  int4: parseNumber,\n  int8: parseBigInt,\n  bool: parseBool,\n  float4: parseNumber,\n  float8: parseNumber,\n  json: parseJson,\n  jsonb: parseJson\n};\nfunction pgArrayParser(value, parser) {\n  let i = 0;\n  let char = null;\n  let str = ``;\n  let quoted = false;\n  let last = 0;\n  let p = void 0;\n  function loop(x) {\n    const xs = [];\n    for (; i < x.length; i++) {\n      char = x[i];\n      if (quoted) {\n        if (char === `\\\\`) {\n          str += x[++i];\n        } else if (char === `\"`) {\n          xs.push(parser ? parser(str) : str);\n          str = ``;\n          quoted = x[i + 1] === `\"`;\n          last = i + 2;\n        } else {\n          str += char;\n        }\n      } else if (char === `\"`) {\n        quoted = true;\n      } else if (char === `{`) {\n        last = ++i;\n        xs.push(loop(x));\n      } else if (char === `}`) {\n        quoted = false;\n        last < i && xs.push(parser ? parser(x.slice(last, i)) : x.slice(last, i));\n        last = i + 1;\n        break;\n      } else if (char === `,` && p !== `}` && p !== `\"`) {\n        xs.push(parser ? parser(x.slice(last, i)) : x.slice(last, i));\n        last = i + 1;\n      }\n      p = char;\n    }\n    last < i && xs.push(parser ? parser(x.slice(last, i + 1)) : x.slice(last, i + 1));\n    return xs;\n  }\n  return loop(value)[0];\n}\nvar MessageParser = class {\n  constructor(parser) {\n    this.parser = __spreadValues(__spreadValues({}, defaultParser), parser);\n  }\n  parse(messages, schema) {\n    return JSON.parse(messages, (key, value) => {\n      if (key === `value` && typeof value === `object` && value !== null) {\n        const row = value;\n        Object.keys(row).forEach((key2) => {\n          row[key2] = this.parseRow(key2, row[key2], schema);\n        });\n      }\n      return value;\n    });\n  }\n  // Parses the message values using the provided parser based on the schema information\n  parseRow(key, value, schema) {\n    var _b;\n    const columnInfo = schema[key];\n    if (!columnInfo) {\n      return value;\n    }\n    const _a = columnInfo, { type: typ, dims: dimensions } = _a, additionalInfo = __objRest(_a, [\"type\", \"dims\"]);\n    const typeParser = (_b = this.parser[typ]) != null ? _b : identityParser;\n    const parser = makeNullableParser(typeParser, columnInfo, key);\n    if (dimensions && dimensions > 0) {\n      const nullablePgArrayParser = makeNullableParser(\n        (value2, _) => pgArrayParser(value2, parser),\n        columnInfo,\n        key\n      );\n      return nullablePgArrayParser(value);\n    }\n    return parser(value, additionalInfo);\n  }\n};\nfunction makeNullableParser(parser, columnInfo, columnName) {\n  var _a;\n  const isNullable = !((_a = columnInfo.not_null) != null ? _a : false);\n  return (value) => {\n    if (isPgNull(value)) {\n      if (!isNullable) {\n        throw new ParserNullValueError(columnName != null ? columnName : `unknown`);\n      }\n      return null;\n    }\n    return parser(value, columnInfo);\n  };\n}\nfunction isPgNull(value) {\n  return value === null || value === `NULL`;\n}\n\n// src/helpers.ts\nfunction isChangeMessage(message) {\n  return `key` in message;\n}\nfunction isControlMessage(message) {\n  return !isChangeMessage(message);\n}\nfunction isUpToDateMessage(message) {\n  return isControlMessage(message) && message.headers.control === `up-to-date`;\n}\n\n// src/constants.ts\nvar LIVE_CACHE_BUSTER_HEADER = `electric-cursor`;\nvar SHAPE_HANDLE_HEADER = `electric-handle`;\nvar CHUNK_LAST_OFFSET_HEADER = `electric-offset`;\nvar SHAPE_SCHEMA_HEADER = `electric-schema`;\nvar CHUNK_UP_TO_DATE_HEADER = `electric-up-to-date`;\nvar COLUMNS_QUERY_PARAM = `columns`;\nvar LIVE_CACHE_BUSTER_QUERY_PARAM = `cursor`;\nvar SHAPE_HANDLE_QUERY_PARAM = `handle`;\nvar LIVE_QUERY_PARAM = `live`;\nvar OFFSET_QUERY_PARAM = `offset`;\nvar TABLE_QUERY_PARAM = `table`;\nvar WHERE_QUERY_PARAM = `where`;\nvar REPLICA_PARAM = `replica`;\n\n// src/fetch.ts\nvar HTTP_RETRY_STATUS_CODES = [429];\nvar BackoffDefaults = {\n  initialDelay: 100,\n  maxDelay: 1e4,\n  multiplier: 1.3\n};\nfunction createFetchWithBackoff(fetchClient, backoffOptions = BackoffDefaults) {\n  const {\n    initialDelay,\n    maxDelay,\n    multiplier,\n    debug = false,\n    onFailedAttempt\n  } = backoffOptions;\n  return (...args) => __async(this, null, function* () {\n    var _a;\n    const url = args[0];\n    const options = args[1];\n    let delay = initialDelay;\n    let attempt = 0;\n    while (true) {\n      try {\n        const result = yield fetchClient(...args);\n        if (result.ok) return result;\n        else throw yield FetchError.fromResponse(result, url.toString());\n      } catch (e) {\n        onFailedAttempt == null ? void 0 : onFailedAttempt();\n        if ((_a = options == null ? void 0 : options.signal) == null ? void 0 : _a.aborted) {\n          throw new FetchBackoffAbortError();\n        } else if (e instanceof FetchError && !HTTP_RETRY_STATUS_CODES.includes(e.status) && e.status >= 400 && e.status < 500) {\n          throw e;\n        } else {\n          yield new Promise((resolve) => setTimeout(resolve, delay));\n          delay = Math.min(delay * multiplier, maxDelay);\n          if (debug) {\n            attempt++;\n            console.log(`Retry attempt #${attempt} after ${delay}ms`);\n          }\n        }\n      }\n    }\n  });\n}\nvar ChunkPrefetchDefaults = {\n  maxChunksToPrefetch: 2\n};\nfunction createFetchWithChunkBuffer(fetchClient, prefetchOptions = ChunkPrefetchDefaults) {\n  const { maxChunksToPrefetch } = prefetchOptions;\n  let prefetchQueue;\n  const prefetchClient = (...args) => __async(this, null, function* () {\n    const url = args[0].toString();\n    const prefetchedRequest = prefetchQueue == null ? void 0 : prefetchQueue.consume(...args);\n    if (prefetchedRequest) {\n      return prefetchedRequest;\n    }\n    prefetchQueue == null ? void 0 : prefetchQueue.abort();\n    const response = yield fetchClient(...args);\n    const nextUrl = getNextChunkUrl(url, response);\n    if (nextUrl) {\n      prefetchQueue = new PrefetchQueue({\n        fetchClient,\n        maxPrefetchedRequests: maxChunksToPrefetch,\n        url: nextUrl,\n        requestInit: args[1]\n      });\n    }\n    return response;\n  });\n  return prefetchClient;\n}\nvar requiredElectricResponseHeaders = [\n  `electric-offset`,\n  `electric-handle`\n];\nvar requiredLiveResponseHeaders = [`electric-cursor`];\nvar requiredNonLiveResponseHeaders = [`electric-schema`];\nfunction createFetchWithResponseHeadersCheck(fetchClient) {\n  return (...args) => __async(this, null, function* () {\n    const response = yield fetchClient(...args);\n    if (response.ok) {\n      const headers = response.headers;\n      const missingHeaders = [];\n      const addMissingHeaders = (requiredHeaders) => missingHeaders.push(...requiredHeaders.filter((h) => !headers.has(h)));\n      addMissingHeaders(requiredElectricResponseHeaders);\n      const input = args[0];\n      const urlString = input.toString();\n      const url = new URL(urlString);\n      if (url.searchParams.get(LIVE_QUERY_PARAM) === `true`) {\n        addMissingHeaders(requiredLiveResponseHeaders);\n      }\n      if (!url.searchParams.has(LIVE_QUERY_PARAM) || url.searchParams.get(LIVE_QUERY_PARAM) === `false`) {\n        addMissingHeaders(requiredNonLiveResponseHeaders);\n      }\n      if (missingHeaders.length > 0) {\n        throw new MissingHeadersError(urlString, missingHeaders);\n      }\n    }\n    return response;\n  });\n}\nvar _fetchClient, _maxPrefetchedRequests, _prefetchQueue, _queueHeadUrl, _queueTailUrl, _PrefetchQueue_instances, prefetch_fn;\nvar PrefetchQueue = class {\n  constructor(options) {\n    __privateAdd(this, _PrefetchQueue_instances);\n    __privateAdd(this, _fetchClient);\n    __privateAdd(this, _maxPrefetchedRequests);\n    __privateAdd(this, _prefetchQueue, /* @__PURE__ */ new Map());\n    __privateAdd(this, _queueHeadUrl);\n    __privateAdd(this, _queueTailUrl);\n    var _a;\n    __privateSet(this, _fetchClient, (_a = options.fetchClient) != null ? _a : (...args) => fetch(...args));\n    __privateSet(this, _maxPrefetchedRequests, options.maxPrefetchedRequests);\n    __privateSet(this, _queueHeadUrl, options.url.toString());\n    __privateSet(this, _queueTailUrl, __privateGet(this, _queueHeadUrl));\n    __privateMethod(this, _PrefetchQueue_instances, prefetch_fn).call(this, options.url, options.requestInit);\n  }\n  abort() {\n    __privateGet(this, _prefetchQueue).forEach(([_, aborter]) => aborter.abort());\n  }\n  consume(...args) {\n    var _a;\n    const url = args[0].toString();\n    const request = (_a = __privateGet(this, _prefetchQueue).get(url)) == null ? void 0 : _a[0];\n    if (!request || url !== __privateGet(this, _queueHeadUrl)) return;\n    __privateGet(this, _prefetchQueue).delete(url);\n    request.then((response) => {\n      const nextUrl = getNextChunkUrl(url, response);\n      __privateSet(this, _queueHeadUrl, nextUrl);\n      if (__privateGet(this, _queueTailUrl) && !__privateGet(this, _prefetchQueue).has(__privateGet(this, _queueTailUrl))) {\n        __privateMethod(this, _PrefetchQueue_instances, prefetch_fn).call(this, __privateGet(this, _queueTailUrl), args[1]);\n      }\n    }).catch(() => {\n    });\n    return request;\n  }\n};\n_fetchClient = new WeakMap();\n_maxPrefetchedRequests = new WeakMap();\n_prefetchQueue = new WeakMap();\n_queueHeadUrl = new WeakMap();\n_queueTailUrl = new WeakMap();\n_PrefetchQueue_instances = new WeakSet();\nprefetch_fn = function(...args) {\n  var _a, _b;\n  const url = args[0].toString();\n  if (__privateGet(this, _prefetchQueue).size >= __privateGet(this, _maxPrefetchedRequests)) return;\n  const aborter = new AbortController();\n  try {\n    const request = __privateGet(this, _fetchClient).call(this, url, __spreadProps(__spreadValues({}, (_a = args[1]) != null ? _a : {}), {\n      signal: chainAborter(aborter, (_b = args[1]) == null ? void 0 : _b.signal)\n    }));\n    __privateGet(this, _prefetchQueue).set(url, [request, aborter]);\n    request.then((response) => {\n      if (!response.ok || aborter.signal.aborted) return;\n      const nextUrl = getNextChunkUrl(url, response);\n      if (!nextUrl || nextUrl === url) {\n        __privateSet(this, _queueTailUrl, void 0);\n        return;\n      }\n      __privateSet(this, _queueTailUrl, nextUrl);\n      return __privateMethod(this, _PrefetchQueue_instances, prefetch_fn).call(this, nextUrl, args[1]);\n    }).catch(() => {\n    });\n  } catch (_) {\n  }\n};\nfunction getNextChunkUrl(url, res) {\n  const shapeHandle = res.headers.get(SHAPE_HANDLE_HEADER);\n  const lastOffset = res.headers.get(CHUNK_LAST_OFFSET_HEADER);\n  const isUpToDate = res.headers.has(CHUNK_UP_TO_DATE_HEADER);\n  if (!shapeHandle || !lastOffset || isUpToDate) return;\n  const nextUrl = new URL(url);\n  if (nextUrl.searchParams.has(LIVE_QUERY_PARAM)) return;\n  nextUrl.searchParams.set(SHAPE_HANDLE_QUERY_PARAM, shapeHandle);\n  nextUrl.searchParams.set(OFFSET_QUERY_PARAM, lastOffset);\n  nextUrl.searchParams.sort();\n  return nextUrl.toString();\n}\nfunction chainAborter(aborter, sourceSignal) {\n  if (!sourceSignal) return aborter.signal;\n  if (sourceSignal.aborted) aborter.abort();\n  else\n    sourceSignal.addEventListener(`abort`, () => aborter.abort(), {\n      once: true\n    });\n  return aborter.signal;\n}\n\n// src/client.ts\nvar RESERVED_PARAMS = /* @__PURE__ */ new Set([\n  LIVE_CACHE_BUSTER_QUERY_PARAM,\n  SHAPE_HANDLE_QUERY_PARAM,\n  LIVE_QUERY_PARAM,\n  OFFSET_QUERY_PARAM\n]);\nfunction toInternalParams(params) {\n  const result = {};\n  for (const [key, value] of Object.entries(params)) {\n    result[key] = Array.isArray(value) ? value.join(`,`) : value;\n  }\n  return result;\n}\nvar _error, _fetchClient2, _messageParser, _subscribers, _lastOffset, _liveCacheBuster, _lastSyncedAt, _isUpToDate, _connected, _shapeHandle, _schema, _onError, _ShapeStream_instances, start_fn, publish_fn, sendErrorToSubscribers_fn, reset_fn;\nvar ShapeStream = class {\n  constructor(options) {\n    __privateAdd(this, _ShapeStream_instances);\n    __privateAdd(this, _error, null);\n    __privateAdd(this, _fetchClient2);\n    __privateAdd(this, _messageParser);\n    __privateAdd(this, _subscribers, /* @__PURE__ */ new Map());\n    __privateAdd(this, _lastOffset);\n    __privateAdd(this, _liveCacheBuster);\n    // Seconds since our Electric Epoch 😎\n    __privateAdd(this, _lastSyncedAt);\n    // unix time\n    __privateAdd(this, _isUpToDate, false);\n    __privateAdd(this, _connected, false);\n    __privateAdd(this, _shapeHandle);\n    __privateAdd(this, _schema);\n    __privateAdd(this, _onError);\n    var _a, _b, _c;\n    this.options = __spreadValues({ subscribe: true }, options);\n    validateOptions(this.options);\n    __privateSet(this, _lastOffset, (_a = this.options.offset) != null ? _a : `-1`);\n    __privateSet(this, _liveCacheBuster, ``);\n    __privateSet(this, _shapeHandle, this.options.handle);\n    __privateSet(this, _messageParser, new MessageParser(options.parser));\n    __privateSet(this, _onError, this.options.onError);\n    const baseFetchClient = (_b = options.fetchClient) != null ? _b : (...args) => fetch(...args);\n    const fetchWithBackoffClient = createFetchWithBackoff(baseFetchClient, __spreadProps(__spreadValues({}, (_c = options.backoffOptions) != null ? _c : BackoffDefaults), {\n      onFailedAttempt: () => {\n        var _a2, _b2;\n        __privateSet(this, _connected, false);\n        (_b2 = (_a2 = options.backoffOptions) == null ? void 0 : _a2.onFailedAttempt) == null ? void 0 : _b2.call(_a2);\n      }\n    }));\n    __privateSet(this, _fetchClient2, createFetchWithResponseHeadersCheck(\n      createFetchWithChunkBuffer(fetchWithBackoffClient)\n    ));\n    __privateMethod(this, _ShapeStream_instances, start_fn).call(this);\n  }\n  get shapeHandle() {\n    return __privateGet(this, _shapeHandle);\n  }\n  get error() {\n    return __privateGet(this, _error);\n  }\n  get isUpToDate() {\n    return __privateGet(this, _isUpToDate);\n  }\n  get lastOffset() {\n    return __privateGet(this, _lastOffset);\n  }\n  subscribe(callback, onError = () => {\n  }) {\n    const subscriptionId = Math.random();\n    __privateGet(this, _subscribers).set(subscriptionId, [callback, onError]);\n    return () => {\n      __privateGet(this, _subscribers).delete(subscriptionId);\n    };\n  }\n  unsubscribeAll() {\n    __privateGet(this, _subscribers).clear();\n  }\n  /** Unix time at which we last synced. Undefined when `isLoading` is true. */\n  lastSyncedAt() {\n    return __privateGet(this, _lastSyncedAt);\n  }\n  /** Time elapsed since last sync (in ms). Infinity if we did not yet sync. */\n  lastSynced() {\n    if (__privateGet(this, _lastSyncedAt) === void 0) return Infinity;\n    return Date.now() - __privateGet(this, _lastSyncedAt);\n  }\n  /** Indicates if we are connected to the Electric sync service. */\n  isConnected() {\n    return __privateGet(this, _connected);\n  }\n  /** True during initial fetch. False afterwise.  */\n  isLoading() {\n    return !__privateGet(this, _isUpToDate);\n  }\n};\n_error = new WeakMap();\n_fetchClient2 = new WeakMap();\n_messageParser = new WeakMap();\n_subscribers = new WeakMap();\n_lastOffset = new WeakMap();\n_liveCacheBuster = new WeakMap();\n_lastSyncedAt = new WeakMap();\n_isUpToDate = new WeakMap();\n_connected = new WeakMap();\n_shapeHandle = new WeakMap();\n_schema = new WeakMap();\n_onError = new WeakMap();\n_ShapeStream_instances = new WeakSet();\nstart_fn = function() {\n  return __async(this, null, function* () {\n    var _a, _b;\n    try {\n      while (!((_a = this.options.signal) == null ? void 0 : _a.aborted) && !__privateGet(this, _isUpToDate) || this.options.subscribe) {\n        const { url, signal } = this.options;\n        const fetchUrl = new URL(url);\n        if (this.options.params) {\n          const reservedParams = Object.keys(this.options.params).filter(\n            (key) => RESERVED_PARAMS.has(key)\n          );\n          if (reservedParams.length > 0) {\n            throw new Error(\n              `Cannot use reserved Electric parameter names in custom params: ${reservedParams.join(`, `)}`\n            );\n          }\n          const params = toInternalParams(this.options.params);\n          if (params.table)\n            fetchUrl.searchParams.set(TABLE_QUERY_PARAM, params.table);\n          if (params.where)\n            fetchUrl.searchParams.set(WHERE_QUERY_PARAM, params.where);\n          if (params.columns)\n            fetchUrl.searchParams.set(COLUMNS_QUERY_PARAM, params.columns);\n          if (params.replica)\n            fetchUrl.searchParams.set(REPLICA_PARAM, params.replica);\n          const customParams = __spreadValues({}, params);\n          delete customParams.table;\n          delete customParams.where;\n          delete customParams.columns;\n          delete customParams.replica;\n          for (const [key, value] of Object.entries(customParams)) {\n            fetchUrl.searchParams.set(key, value);\n          }\n        }\n        fetchUrl.searchParams.set(OFFSET_QUERY_PARAM, __privateGet(this, _lastOffset));\n        if (__privateGet(this, _isUpToDate)) {\n          fetchUrl.searchParams.set(LIVE_QUERY_PARAM, `true`);\n          fetchUrl.searchParams.set(\n            LIVE_CACHE_BUSTER_QUERY_PARAM,\n            __privateGet(this, _liveCacheBuster)\n          );\n        }\n        if (__privateGet(this, _shapeHandle)) {\n          fetchUrl.searchParams.set(\n            SHAPE_HANDLE_QUERY_PARAM,\n            __privateGet(this, _shapeHandle)\n          );\n        }\n        fetchUrl.searchParams.sort();\n        let response;\n        try {\n          response = yield __privateGet(this, _fetchClient2).call(this, fetchUrl.toString(), {\n            signal,\n            headers: this.options.headers\n          });\n          __privateSet(this, _connected, true);\n        } catch (e) {\n          if (e instanceof FetchBackoffAbortError) break;\n          if (!(e instanceof FetchError)) throw e;\n          if (e.status == 409) {\n            const newShapeHandle = e.headers[SHAPE_HANDLE_HEADER];\n            __privateMethod(this, _ShapeStream_instances, reset_fn).call(this, newShapeHandle);\n            yield __privateMethod(this, _ShapeStream_instances, publish_fn).call(this, e.json);\n            continue;\n          } else if (e.status >= 400 && e.status < 500) {\n            __privateMethod(this, _ShapeStream_instances, sendErrorToSubscribers_fn).call(this, e);\n            throw e;\n          }\n        }\n        const { headers, status } = response;\n        const shapeHandle = headers.get(SHAPE_HANDLE_HEADER);\n        if (shapeHandle) {\n          __privateSet(this, _shapeHandle, shapeHandle);\n        }\n        const lastOffset = headers.get(CHUNK_LAST_OFFSET_HEADER);\n        if (lastOffset) {\n          __privateSet(this, _lastOffset, lastOffset);\n        }\n        const liveCacheBuster = headers.get(LIVE_CACHE_BUSTER_HEADER);\n        if (liveCacheBuster) {\n          __privateSet(this, _liveCacheBuster, liveCacheBuster);\n        }\n        const getSchema = () => {\n          const schemaHeader = headers.get(SHAPE_SCHEMA_HEADER);\n          return schemaHeader ? JSON.parse(schemaHeader) : {};\n        };\n        __privateSet(this, _schema, (_b = __privateGet(this, _schema)) != null ? _b : getSchema());\n        const messages = status === 204 ? `[]` : yield response.text();\n        if (status === 204) {\n          __privateSet(this, _lastSyncedAt, Date.now());\n        }\n        const batch = __privateGet(this, _messageParser).parse(messages, __privateGet(this, _schema));\n        if (batch.length > 0) {\n          const lastMessage = batch[batch.length - 1];\n          if (isUpToDateMessage(lastMessage)) {\n            __privateSet(this, _lastSyncedAt, Date.now());\n            __privateSet(this, _isUpToDate, true);\n          }\n          yield __privateMethod(this, _ShapeStream_instances, publish_fn).call(this, batch);\n        }\n      }\n    } catch (err) {\n      __privateSet(this, _error, err);\n      if (__privateGet(this, _onError)) {\n        const retryOpts = yield __privateGet(this, _onError).call(this, err);\n        if (typeof retryOpts === `object`) {\n          __privateMethod(this, _ShapeStream_instances, reset_fn).call(this);\n          if (`params` in retryOpts) {\n            this.options.params = retryOpts.params;\n          }\n          if (`headers` in retryOpts) {\n            this.options.headers = retryOpts.headers;\n          }\n          __privateMethod(this, _ShapeStream_instances, start_fn).call(this);\n        }\n        return;\n      }\n      throw err;\n    } finally {\n      __privateSet(this, _connected, false);\n    }\n  });\n};\npublish_fn = function(messages) {\n  return __async(this, null, function* () {\n    yield Promise.all(\n      Array.from(__privateGet(this, _subscribers).values()).map((_0) => __async(this, [_0], function* ([callback, __]) {\n        try {\n          yield callback(messages);\n        } catch (err) {\n          queueMicrotask(() => {\n            throw err;\n          });\n        }\n      }))\n    );\n  });\n};\nsendErrorToSubscribers_fn = function(error) {\n  __privateGet(this, _subscribers).forEach(([_, errorFn]) => {\n    errorFn == null ? void 0 : errorFn(error);\n  });\n};\n/**\n * Resets the state of the stream, optionally with a provided\n * shape handle\n */\nreset_fn = function(handle) {\n  __privateSet(this, _lastOffset, `-1`);\n  __privateSet(this, _liveCacheBuster, ``);\n  __privateSet(this, _shapeHandle, handle);\n  __privateSet(this, _isUpToDate, false);\n  __privateSet(this, _connected, false);\n  __privateSet(this, _schema, void 0);\n};\nShapeStream.Replica = {\n  FULL: `full`,\n  DEFAULT: `default`\n};\nfunction validateOptions(options) {\n  if (!options.url) {\n    throw new MissingShapeUrlError();\n  }\n  if (options.signal && !(options.signal instanceof AbortSignal)) {\n    throw new InvalidSignalError();\n  }\n  if (options.offset !== void 0 && options.offset !== `-1` && !options.handle) {\n    throw new MissingShapeHandleError();\n  }\n  if (options.params) {\n    const reservedParams = Object.keys(options.params).filter(\n      (key) => RESERVED_PARAMS.has(key)\n    );\n    if (reservedParams.length > 0) {\n      throw new ReservedParamError(reservedParams);\n    }\n  }\n  return;\n}\n\n// src/shape.ts\nvar _data, _subscribers2, _hasNotifiedSubscribersUpToDate, _error2, _Shape_instances, process_fn, handleError_fn, notify_fn;\nvar Shape = class {\n  constructor(stream) {\n    __privateAdd(this, _Shape_instances);\n    __privateAdd(this, _data, /* @__PURE__ */ new Map());\n    __privateAdd(this, _subscribers2, /* @__PURE__ */ new Map());\n    __privateAdd(this, _hasNotifiedSubscribersUpToDate, false);\n    __privateAdd(this, _error2, false);\n    this.stream = stream;\n    this.stream.subscribe(\n      __privateMethod(this, _Shape_instances, process_fn).bind(this),\n      __privateMethod(this, _Shape_instances, handleError_fn).bind(this)\n    );\n  }\n  get isUpToDate() {\n    return this.stream.isUpToDate;\n  }\n  get lastOffset() {\n    return this.stream.lastOffset;\n  }\n  get handle() {\n    return this.stream.shapeHandle;\n  }\n  get rows() {\n    return this.value.then((v) => Array.from(v.values()));\n  }\n  get currentRows() {\n    return Array.from(this.currentValue.values());\n  }\n  get value() {\n    return new Promise((resolve, reject) => {\n      if (this.stream.isUpToDate) {\n        resolve(this.currentValue);\n      } else {\n        const unsubscribe = this.subscribe(({ value }) => {\n          unsubscribe();\n          if (__privateGet(this, _error2)) reject(__privateGet(this, _error2));\n          resolve(value);\n        });\n      }\n    });\n  }\n  get currentValue() {\n    return __privateGet(this, _data);\n  }\n  get error() {\n    return __privateGet(this, _error2);\n  }\n  /** Unix time at which we last synced. Undefined when `isLoading` is true. */\n  lastSyncedAt() {\n    return this.stream.lastSyncedAt();\n  }\n  /** Time elapsed since last sync (in ms). Infinity if we did not yet sync. */\n  lastSynced() {\n    return this.stream.lastSynced();\n  }\n  /** True during initial fetch. False afterwise.  */\n  isLoading() {\n    return this.stream.isLoading();\n  }\n  /** Indicates if we are connected to the Electric sync service. */\n  isConnected() {\n    return this.stream.isConnected();\n  }\n  subscribe(callback) {\n    const subscriptionId = Math.random();\n    __privateGet(this, _subscribers2).set(subscriptionId, callback);\n    return () => {\n      __privateGet(this, _subscribers2).delete(subscriptionId);\n    };\n  }\n  unsubscribeAll() {\n    __privateGet(this, _subscribers2).clear();\n  }\n  get numSubscribers() {\n    return __privateGet(this, _subscribers2).size;\n  }\n};\n_data = new WeakMap();\n_subscribers2 = new WeakMap();\n_hasNotifiedSubscribersUpToDate = new WeakMap();\n_error2 = new WeakMap();\n_Shape_instances = new WeakSet();\nprocess_fn = function(messages) {\n  let dataMayHaveChanged = false;\n  let isUpToDate = false;\n  let newlyUpToDate = false;\n  messages.forEach((message) => {\n    if (isChangeMessage(message)) {\n      dataMayHaveChanged = [`insert`, `update`, `delete`].includes(\n        message.headers.operation\n      );\n      switch (message.headers.operation) {\n        case `insert`:\n          __privateGet(this, _data).set(message.key, message.value);\n          break;\n        case `update`:\n          __privateGet(this, _data).set(message.key, __spreadValues(__spreadValues({}, __privateGet(this, _data).get(message.key)), message.value));\n          break;\n        case `delete`:\n          __privateGet(this, _data).delete(message.key);\n          break;\n      }\n    }\n    if (isControlMessage(message)) {\n      switch (message.headers.control) {\n        case `up-to-date`:\n          isUpToDate = true;\n          if (!__privateGet(this, _hasNotifiedSubscribersUpToDate)) {\n            newlyUpToDate = true;\n          }\n          break;\n        case `must-refetch`:\n          __privateGet(this, _data).clear();\n          __privateSet(this, _error2, false);\n          __privateSet(this, _hasNotifiedSubscribersUpToDate, false);\n          isUpToDate = false;\n          newlyUpToDate = false;\n          break;\n      }\n    }\n  });\n  if (newlyUpToDate || isUpToDate && dataMayHaveChanged) {\n    __privateSet(this, _hasNotifiedSubscribersUpToDate, true);\n    __privateMethod(this, _Shape_instances, notify_fn).call(this);\n  }\n};\nhandleError_fn = function(e) {\n  if (e instanceof FetchError) {\n    __privateSet(this, _error2, e);\n    __privateMethod(this, _Shape_instances, notify_fn).call(this);\n  }\n};\nnotify_fn = function() {\n  __privateGet(this, _subscribers2).forEach((callback) => {\n    callback({ value: this.currentValue, rows: this.currentRows });\n  });\n};\n\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@electric-sql/client/dist/index.mjs\n");

/***/ })

};
;